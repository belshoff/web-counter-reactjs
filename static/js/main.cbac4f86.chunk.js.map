{"version":3,"sources":["serviceWorker.js","redux/reducers.js","pages/home/index.jsx","index.js","redux/actions.js"],"names":["Boolean","window","location","hostname","match","initialState","counter","Home","props","incrementCounter","dispatch","type","decrementCounter","state","this","className","onClick","value","readOnly","React","Component","connect","store","createStore","action","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gQAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,kBChBAC,EAAe,CACnBC,QAAS,G,2CCGLC,G,kBACJ,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAMRC,iBAAmB,WAEjB,EAAKD,MAAME,SAAS,CAAEC,KAAM,eATX,EAYnBC,iBAAmB,WACjB,EAAKJ,MAAME,SAAS,CAAEC,KAAM,eAX5B,EAAKE,MAAQ,CACXP,QAAS,GAHM,E,sEAgBT,IACAA,EAAYQ,KAAKN,MAAjBF,QACR,OACE,6BAASS,UAAU,QACjB,yBAAKA,UAAU,UAAf,mBACA,yBAAKA,UAAU,aACb,4BAAQA,UAAU,MAAMC,QAASF,KAAKF,kBAAtC,OACA,2BAAOD,KAAK,SAASM,MAAOX,EAASY,UAAQ,IAC7C,4BAAQH,UAAU,MAAMC,QAASF,KAAKL,kBAAtC,a,GAzBSU,IAAMC,YAoCVC,eAJS,SAAAR,GAAK,MAAK,CAChCP,QAASO,EAAMP,WAGFe,CAAyBd,GC5BlCe,EAAQC,aFRP,WAAgD,IAA9BV,EAA6B,uDAAvBR,EAAcmB,EAAS,uCACpD,OAAOA,EAAOb,MACZ,IGRqB,YHSnB,MAAO,CACLL,QAASO,EAAMP,QAAU,GAE7B,IGXqB,YHYnB,MAAO,CACLA,QAASO,EAAMP,QAAU,GAE7B,QACE,OAAOO,KEDXZ,OAAOwB,8BAAgCxB,OAAOwB,gCAGhDC,IAASC,OACP,kBAAC,IAAD,CAAUL,MAAOA,GAAQ,kBAAC,EAAD,OACzBM,SAASC,eAAe,SH8GpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.cbac4f86.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { INCREMENT, DECREMENT } from './actions'\n\nconst initialState = {\n  counter: 0\n}\n\nexport function reducer( state=initialState, action ) {\n  switch(action.type) {\n    case INCREMENT:\n      return {\n        counter: state.counter + 1\n      }\n    case DECREMENT:\n      return {\n        counter: state.counter - 1\n      }\n    default:\n      return state\n  }\n}","import React from 'react'\nimport './style.css'\n\nimport { connect } from 'react-redux'\n\n\nclass Home extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      counter: 0\n    }\n  }\n\n  incrementCounter = () => {\n\n    this.props.dispatch({ type: 'INCREMENT' })\n  }\n\n  decrementCounter = () => {\n    this.props.dispatch({ type: 'DECREMENT' })\n  }\n\n  render() {\n    const { counter } = this.props\n    return (\n      <section className=\"main\" >\n        <div className=\"header\">Contador Online</div>\n        <div className=\"container\" >\n          <button className=\"btn\" onClick={this.decrementCounter} > - </button>\n          <input type=\"number\" value={counter} readOnly />\n          <button className=\"btn\" onClick={this.incrementCounter} > + </button>\n        </div>\n      </section>\n    )\n  }\n}\n\nconst mapStateToProps = state => ({\n  counter: state.counter\n});\n\nexport default connect(mapStateToProps)(Home)","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\n/** Redux Imports */\n\nimport { Provider } from 'react-redux'\nimport { createStore } from 'redux'\nimport { reducer } from './redux/reducers'\n\n/** Pages */\nimport Home from './pages/home';\n\nconst store = createStore(\n  reducer,\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n)\n\nReactDOM.render(\n  <Provider store={store} ><Home /></Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","export const INCREMENT = 'INCREMENT'\nexport const DECREMENT = 'DECREMENT'"],"sourceRoot":""}